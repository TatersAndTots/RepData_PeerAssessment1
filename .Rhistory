t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3)
strptime(t3, %B %d, %Y %H:%M)
t4 <- strptime(t3, %B %d, %Y %H:%M)
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
library(datasets)
data("iris")
head(iris)
apply(split(iris$Sepal.Length, iris$Species), mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
test <- matrix(1;6, 2, 3)
test <- matrix(1;6, 2, 3)
test <- matrix(1:6, 2, 3)
test
teast[1,1] <- 4
test[1,1] <- 4
test
n <- Null
n <- NULL
n
functiontest <- function(x) meantest <<- mean(x)
functiontest(1:10)
meantest
ls()
N <- function() print("N")
J <- function() print("J")
P <- function() print("P")
N
N()
?list
?set
list(N, J, P)
Ltest <- list(N,J,P)
Ltest[1]
setmean <- function(mean) q <<- mean
setmean(1:3)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinver <- function(solve) m <<- solve
getinver <- function() m
list(set = set, get = get,
setinver = setinver,
getinver = getinver)
}
CacheSolve <- function(x, ...) {
m <- x$getinver()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinver(m)
m
}
textmat <- matrix(1:6, 2, 3)
textmat
solve(textmat)
textmat <- matrix(1:9, 3, 3)
solve(textmat)
textmat <- matrix(1:4, 2, 2)
solve(textmat)
test2 <- makeCacheMatrix(textmat)
CacheSolve(test2)
CacheSolve(test)
CacheSolve(test2)
length("fa2ab139f1607ef8b04bbac5ffe00b88f446bd7d")
library(swirl)
swirl()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
?plot
?par
?for
for()
x <- 10
for(x > 0){
x
x <- x - 1
}
loop <- function(x){
for(x > 0){
x
x <- x - 1
}
}
loop <- function(x){
while (x > 0){
x
x <- x - 1
}
}
loop(10)
x <- 10
while (x > 0){
x
x <- x - 1
}
x
?print
x <- 10
while (x > 0){
print(x)
x <- x - 1
}
?unique
library(httr)
my app = oauth_app("Datasharing", key = "b5742c396eb1e65ca4ca", secret = "68960e833e62d4fa09c3dbf74b3eb4d4fbf84cf2")
myapp = oauth_app("Datasharing", key = "b5742c396eb1e65ca4ca", secret = "68960e833e62d4fa09c3dbf74b3eb4d4fbf84cf2")
?nchar
library(swirl)
swirl()
bye()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, straingsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dyplr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
search(cran, -x:size)
select(cran, -x:size)
select(cran, -(x:size))
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -x:size)
select(cran, -(X:size))
filter(cran, package == swirl())
filter(cran, package == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linus-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
library(swirl)
swirl()
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000 )
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
library(swirl)
rm(list=ls())
swirl()
install.packages("ggplot2")
library(swirl)
swirl()
swirl()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm)
hist(ppm, col = "green")
rug(ppm)
rug(low)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline( v = 12, lwd = 2)
abline( v = median(ppm), lwd = 4, col = "magenta")
abline( v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
ref <- table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, pollution, col = "red")
swirl()
library(swirl)
rm(list=ls())
swirl()
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west"), col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
plot(pollution, )
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, pm25, col = pollution$region)
plot(pollution$latitude, pmm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow(1,2), mar = c(5,4,2,1))
par(mfrow = (1,2), mar = c(5,4,2,1))
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subest(pollution, region = west)
west <- subset(pollution, region = west)
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png, geyserplot.png)
dev.copy(png, file = "geyserplot.png")
dev.off()\
dev.off()
library(swirl)
rm(list=ls())
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$speed), "Swirl rules!")
text(mean(cars$speed), max(cars$dist), "Swirl rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Live.Exp ~ Income, state, c(4,1))
xyplot(Live.Exp ~ Income, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
ggplot2(displ, hwy, data = mpg)
install.packaches("ggplot2")
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Mont, airquality)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(mean = "Ozone and Wind in New York City")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type set = "n")
plot(airquality$Wind, airquality$Ozone, type set == "n")
plot(airquality$Wind, airquality$Ozone, typeset = "n")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality$Month == 5)
may <- subset(airquality, airquality$Month == 5)
may <- subset(airquality, Month == 5)
?pch
?par
sfd
info()
?plot
names(pch)
names(pch())
?par
points(may, pch = 17, col = "blue")
points(may$wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind,may$Ozone,col = "blue",pch = 17)
notmay <- airquality$Month != 5)
notmay <- subset(airquality$Month != 5)
notmay <- subset(airquality, airquality$Month != 5)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone,col = "red",pch = 8)
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,|3), mar = c(4,4,2,1), oma = c(0,0,2,0))
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City, outer = TRUE")
mtext("Ozone and Weather in New York City", outer = TRUE")
mtext("Ozone and Weather in New York City", outer = TRUE)
swirl()
?str
?bwplot
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight, layout = c(3,1))
xyplot(weight ~ Time | Diet, BodyWeight, layout = c(3,1))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?trellis.par.set
library(datasets)
data(airquality)
head(airquality)
class(airquality$Month)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?ggplot
?geom_smooth
library(swirl)
swirl()
rm(list=ls())
install.packages(c("colorspace", "crayon", "curl", "DBI", "devtools", "digest", "ggplot2", "httr", "jsonlite", "mime", "openssl", "R6", "Rcpp", "reshape2", "rstudioapi", "scales", "stringi", "stringr", "tibble", "withr", "XML"))
install.packages("rmarkdown", contriburl = "http://cran.r-project.org/src/contrib", type = "source")
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
install.packages("rmarkdown", repos = "https://cran.revolutionanalytics.com")
?hist
?hist
setwd("~/R_Coding/Mod5/RepData_PeerAssessment1")
rm(list=ls())
library(ggplot2)
library(knitr)
test <- c(1:3, NA)
test
mean(test)
mean(test[1:3])
6/3
intin <- split(int$steps, int$interval)
intinm <- unlist(lapply(na.omit(intin), mean))
plot(names(intinm), intinm, type = "l", main = "Average Number of Steps Taken per 5 Minute Interval"
, xlab = "Interval", ylab = "Steps")
int <- na.omit(data)
intin <- split(int$steps, int$interval)
intinm <- unlist(lapply(na.omit(intin), mean))
plot(names(intinm), intinm, type = "l", main = "Average Number of Steps Taken per 5 Minute Interval"
, xlab = "Interval", ylab = "Steps")
int <- na.omit(data)
intin <- split(int$steps, int$interval)
intinm <- unlist(lapply(na.omit(intin), mean))
plot(names(intinm), intinm, type = "l", main = "Average Number of Steps Taken per 5 Minute Interval"
, xlab = "Interval", ylab = "Steps")
head(int$steps)
setwd("~/R_Coding/Mod5/RepData_PeerAssessment1")
rm(list=ls())
library(ggplot2)
library(knitr)
data <- read.csv("activity.csv")
int <- na.omit(data)
intin <- split(int$steps, int$interval)
intinm <- unlist(lapply(na.omit(intin), mean))
plot(names(intinm), intinm, type = "l", main = "Average Number of Steps Taken per 5 Minute Interval"
, xlab = "Interval", ylab = "Steps")
levels(data$interval)
levels(as.factor(data$interval))
c(sum(is.na(data$steps)), sum(is.na(data$interval)), sum(is.na(data$date))
)
test <- c(NA, NA, 1, 2)
range(test)
intinmean <- lapply(intin, na.omit)
length(intin[[1]])
length(intinmean[[1]])
length(length(intin[[1]]))
length(length(intin))
length(intin))
lapply(intin, length)
unlist(lapply(intin, length))
unlist(lapply(intinmean, length))
intin[[1]]
intin[[2]]
head(data$steps, 30)
unlist(lapply(data, length))
dataint <- split(data$steps, data$interval)
unlist(lapply(dataint, length))
intmean <- unlist(lapply(intin, mean))
mean(na.omit(data$steps))
med <- function(x) {
if (is.na(x))
{x <- 37.3826}
else {x <- x}
}
datana <- cbind(sapply(data$steps, med), data[,2:3])
names(datana) <- c("steps", "date", "interval")
days2 <- split(datana$steps, datana$date)
dayssum2 <- unlist(lapply(days2, mean))
daysme2 <- unlist(lapply(days2, mean))
daysmd2 <- unlist(lapply(days2, median))
daysdf2 <- data.frame(cbind(daysme2, daysmd2))
names(daysdf2) <- c("Sum", "Mean", "Median")
